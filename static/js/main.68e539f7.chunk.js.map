{"version":3,"sources":["components/CountDetail.js","components/Header.js","components/App.js","index.js"],"names":["CountDetail","props","count","onClick","window","location","reload","Header","App","checkRandomNumber","e","parseInt","state","term","number","setState","result","renderingCount","console","log","hint","preventDefault","num","Math","floor","random","this","className","value","onChange","target","type","disabled","style","marginLeft","color","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAUeA,EARK,SAACC,GACjB,OACI,gCACI,yDAA4BA,EAAMC,MAAlC,oCACA,wBAAQC,QAAS,kBAAMC,OAAOC,SAASC,QAAO,IAA9C,gCCKGC,EATA,WACX,OACI,gCACI,iDACA,uICmEGC,G,wDAnEX,WAAYP,GAAO,IAAD,8BACd,cAAMA,IASVQ,kBAAoB,SAACC,GACdC,SAAS,EAAKC,MAAMC,QAAU,EAAKD,MAAME,OACxC,EAAKC,SAAS,CAAEC,OAAQ,qCAAsCC,eAAgB,SACrD,KAApB,EAAKL,MAAMC,KAChB,EAAKE,SAAS,CAAEC,OAAQ,oBAExB,EAAKD,SAAS,CAAEC,OAAQ,UAE5BE,QAAQC,IAAI,EAAKP,MAAME,OAAO,EAAKF,MAAMC,MACzC,EAAKE,SAAS,CAAEb,MAAO,EAAKU,MAAMV,MAAM,IACrCS,SAAS,EAAKC,MAAMC,MAAQ,EAAKD,MAAME,OACtC,EAAKC,SAAS,CAAEK,KAAM,8BAEtB,EAAKL,SAAS,CAAEK,KAAM,6BAE1BV,EAAEW,kBAvBF,EAAKT,MAAQ,CAAEE,OAAQ,GAAID,KAAM,GAAIG,OAAQ,GAAId,MAAO,EAAGe,eAAgB,QAASG,KAAM,IAF5E,E,gEAKd,IAAME,EAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,EAC9CC,KAAKX,SAAS,CACVD,OAAQQ,M,+BAoBP,IAAD,OAkBJ,OACI,sBAAKK,UAAU,MAAf,UACI,cAAC,EAAD,IACA,qDACA,uBACAC,MAAOF,KAAKd,MAAMC,KAClBgB,SAAW,SAAAnB,GAAC,OAAG,EAAKK,SAAS,CAAEF,KAAMH,EAAEoB,OAAOF,SAC9CG,KAAK,OACLC,SAAwC,SAA9BN,KAAKd,MAAMK,iBAErB,wBACCgB,MAAO,CAACC,WAAW,OAClB/B,QAASuB,KAAKjB,kBACduB,SAAwC,SAA9BN,KAAKd,MAAMK,eAHvB,oBAhBqB,UAAtB,EAAKL,MAAMI,OACH,oBAAIiB,MAAO,CAAEE,MAAO,OAApB,SAA6B,EAAKvB,MAAMI,SAExC,oBAAIiB,MAAO,CAAEE,MAAO,SAApB,SAA+B,EAAKvB,MAAMI,SAbpB,SAA9B,EAAKJ,MAAMK,eACH,cAAC,EAAD,CAAaf,MAAO,EAAKU,MAAMV,QAIlC,6BAAK,EAAKU,MAAMQ,c,GAnClBgB,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.68e539f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CountDetail = (props) => {\r\n    return (\r\n        <div>\r\n            <h3>Well Done! It took you {props.count} attempts to guess this number</h3>\r\n            <button onClick={() => window.location.reload(false)}>start new game</button>\r\n        </div>\r\n    )\r\n}\r\nexport default CountDetail;","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div>\r\n            <h1>Guess My Number</h1>\r\n            <h3>We have selected a random number between 1 and 100. See if you can guess it in 10 turns or fewer.</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport CountDetail from './CountDetail';\r\nimport Header from './Header';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { number: '', term: '', result: '', count: 0, renderingCount: 'false', hint: ''};\r\n    }\r\n    componentDidMount(){\r\n        const num = Math.floor(Math.random() * 100) + 1;\r\n        this.setState({\r\n            number: num\r\n        });\r\n    }\r\n    checkRandomNumber = (e) => {\r\n        if(parseInt(this.state.term) === this.state.number){\r\n            this.setState({ result: 'Congratulations! You got it right!', renderingCount: 'true'});\r\n        }else if(this.state.term === ''){\r\n            this.setState({ result: 'Give some Value'});\r\n        }else {\r\n            this.setState({ result: 'Wrong'});\r\n        }\r\n        console.log(this.state.number,this.state.term);\r\n        this.setState({ count: this.state.count+1})\r\n        if(parseInt(this.state.term) > this.state.number){\r\n            this.setState({ hint: 'Your Last guess was high!'});\r\n        }else{\r\n            this.setState({ hint: 'Your Last guess was low!'})\r\n        }\r\n        e.preventDefault();\r\n    }\r\n    render(){\r\n        const renderCount = () => {\r\n            if(this.state.renderingCount === 'true'){\r\n                return <CountDetail count={this.state.count} />\r\n            }\r\n            else{\r\n                return (\r\n                    <h3>{this.state.hint}</h3>\r\n                )\r\n            }\r\n        }\r\n        const changeColor = () => {\r\n            if(this.state.result === 'Wrong'){\r\n                return <h3 style={{ color: 'red'}}>{this.state.result}</h3>;\r\n            }else{\r\n                return <h3 style={{ color: 'green'}}>{this.state.result}</h3>;\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"App\">\r\n                <Header />\r\n                <label>Enter a Guess : </label>\r\n                <input \r\n                value={this.state.term}\r\n                onChange={ e=> this.setState({ term: e.target.value})}\r\n                type=\"text\"\r\n                disabled={this.state.renderingCount === 'true' ? true : false}\r\n                ></input>\r\n                <button \r\n                 style={{marginLeft:'5px'}}\r\n                  onClick={this.checkRandomNumber}\r\n                  disabled={this.state.renderingCount === 'true' ? true : false}\r\n                  >submit</button>\r\n                {changeColor()}\r\n                {renderCount()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}